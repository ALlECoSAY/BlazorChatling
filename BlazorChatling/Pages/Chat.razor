@page "/chat/{id:int}"
@attribute [Authorize]
@using System.ComponentModel.DataAnnotations
@using BlazorChatling.Data
@using BlazorChatling.Data.DBContextFiles
@using Microsoft.AspNetCore.SignalR.Client;
@inject ChatsDAOService ChatsDAOService
@inject UserInfoGlobalClass UserInfoGlobalClass
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime

@if (showOlder)
{
    <div>
        <button @onclick="loadOlderMessages">
            Load more
        </button>
    </div>
}
<div style="margin-bottom: 100px; width:parent">
    @if(messages.Count()>0)
    foreach (Messages message in ((IEnumerable<Messages>)messages).Reverse())
    {
        @if (@message.IdUser == UserInfoGlobalClass.user.Id) {
            <ContextMenuTrigger WrapperTag="tr" MenuId="selfMassageMenu" Data="message">
                @if (message.IdReplyMessage != null) {
                        <ChatItem Message="message" TargetMessage="@messages.Where(x => x.Id == message.IdReplyMessage).First()" User="@participants.Where(x => x.Id == message.IdUser).First()" TargetUser="@participants.Where(x => x.Id == message.IdReplyUser).First()" />
                } else {
                    <ChatItem Message="message" User="UserInfoGlobalClass.user"/>
                }
            </ContextMenuTrigger>
        } else 
        {
            <ContextMenuTrigger WrapperTag="tr" MenuId="foreignMassageMenu" Data="message">
                @if (message.IdReplyMessage != null) {
                        <ChatItem Message="message" TargetMessage="@messages.Where(x => x.Id == message.IdReplyMessage).First()" User="@participants.Where(x => x.Id == message.IdUser).First()" TargetUser="@participants.Where(x => x.Id == message.IdReplyUser).First()" />
                } else {
                        <ChatItem Message="message" User="@participants.Where(x => x.Id == message.IdUser).First()" />
                }
            </ContextMenuTrigger>
        }

    }

</div>

<div class="sender">
    <EditForm Model="@inputText" OnValidSubmit="@HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <InputText style="width:600px" id="text" @bind-Value="inputText.text" />

        <button type="submit">@if (isWhispering) { <strong>Whisper</strong> } else if( isReplying) { <strong>Reply</strong> } else  {<strong>Submit</strong>} </button>
    </EditForm>
</div>


<ContextMenu Id="selfMassageMenu">
    <Item OnClick="@editMessage">Edit</Item>
    <Seperator></Seperator>
    <Item>
        Delete
        <SubMenu>
            <Item OnClick="@deleteMessageForMe">Delete for me</Item>
            <Seperator></Seperator>
            <Item OnClick="@deleteMessageForAll">Delete for all</Item>
        </SubMenu>
    </Item>
</ContextMenu>

<ContextMenu Id="foreignMassageMenu">
    <Item>
        Reply
        <SubMenu>
            <Item OnClick="@replyTo">Reply</Item>
            <Seperator></Seperator>
            <Item OnClick="@whisperTo">Whisper</Item>
        </SubMenu>
    </Item>
</ContextMenu>



@code {
    [Parameter]
    public int? id { get; set; }

    private List<Messages> messages = new List<Messages>();
    IEnumerable<Users> participants = new List<Users>();

    private int shift = 0;


    public MyInputText inputText;


    protected async override Task OnInitializedAsync() {
        inputText = new MyInputText();


        if (UserInfoGlobalClass.user == null || id == null) NavigationManager.NavigateTo("/account/login");
        await Chate();
    }
    protected async override Task OnParametersSetAsync() {
        shift = 0;
        messages = new List<Messages>();
        participants = new List<Users>();
        inputText.text = string.Empty;
        isEditing = false;
        showOlder = true;

        if (UserInfoGlobalClass.user == null || id == null) NavigationManager.NavigateTo("/account/login");

        participants = await ChatsDAOService.getUsersInChat(id.Value);
        loadOlderMessages();

    }

    private async void HandleValidSubmit() {
        Messages message = new Messages();
        if(isEditing) {
            editingMessage.MsgText = inputText.text;
            editingMessage.IsEdited = true;
            inputText.text = string.Empty;
            ChatsDAOService.editMessage(editingMessage);
            StateHasChanged();
            isEditing = false;
            await SendAsync(editingMessage, TypeOfMessage.edit);
            return;
        }
        if (isReplying) { 
            message.IdChat = id.Value;
            message.IdUser = UserInfoGlobalClass.user.Id;
            message.MsgText = inputText.text;
            message.IdReplyUser = participants.Where(x => x.Id == replyMessage.IdUser).First().Id;
            message.IdReplyMessage = replyMessage.Id;

            isReplying = false;
            inputText.text = string.Empty;
            ChatsDAOService.insertMessage(message);
            messages.Insert(0, message);
            StateHasChanged();
            await JsRuntime.InvokeVoidAsync("OnScrollEvent");
            await SendAsync(message, TypeOfMessage.write);
            return;
        }
        if (isWhispering) { 

            message.IdChat = id.Value;
            message.IdUser = UserInfoGlobalClass.user.Id;
            message.MsgText = inputText.text;
            message.IdReplyUser = participants.Where(x => x.Id == replyMessage.IdUser).First().Id;
            message.IdReplyMessage = replyMessage.Id;
            message.IsReplyVisibleToGroup = false;

            isWhispering = false;
            inputText.text = string.Empty;
            ChatsDAOService.insertMessage(message);
            messages.Insert(0, message);
            StateHasChanged();
            await JsRuntime.InvokeVoidAsync("OnScrollEvent");
            await SendAsync(message, TypeOfMessage.write);
            return;
        }


        message.IdChat = id.Value;
        message.IdUser = UserInfoGlobalClass.user.Id;
        message.MsgText = inputText.text;


        inputText.text = string.Empty;
        ChatsDAOService.insertMessage(message);
        messages.Insert(0, message);
        StateHasChanged();
        await JsRuntime.InvokeVoidAsync("OnScrollEvent");
        await SendAsync(message, TypeOfMessage.write);
        // Process the valid form
    }

    private bool showOlder = true;
    private async void loadOlderMessages() {

        var newMessages = await ChatsDAOService.getMessages(id.Value, UserInfoGlobalClass.user.Id, shift++,20);
        if (newMessages.Count < 20) { showOlder = false; }
        messages.AddRange(newMessages);
        StateHasChanged();
    }





    #region ContextEvents
    

    private bool isEditing = false;
    private Messages editingMessage;
    void editMessage(ItemClickEventArgs e) {
        var currentMessage = e.Data as Messages;
        inputText.text = currentMessage.MsgText;
        editingMessage = currentMessage;
        isEditing = true;
        StateHasChanged();
    }
    void deleteMessageForMe(ItemClickEventArgs e) {
        var currentMessage = e.Data as Messages;
        messages.Remove(currentMessage);
        currentMessage.IsVisibleToCreator = false;
        ChatsDAOService.editMessage(currentMessage);
        StateHasChanged();
    }
    async void deleteMessageForAll(ItemClickEventArgs e) {
        var currentMessage = e.Data as Messages;
        messages.Remove(currentMessage);
        ChatsDAOService.deleteMessage(currentMessage);
        await SendAsync(currentMessage, TypeOfMessage.delete);
        StateHasChanged();
    }
    private bool isReplying = false;
    async void replyTo(ItemClickEventArgs e) {
        replyMessage = e.Data as Messages;
        if (!replyMessage.IsReplyVisibleToGroup.Value) {
            isWhispering = true;
            isReplying = false;
            return;
        }

        isReplying = true;
        isWhispering = false;
    }
    private Messages replyMessage;
    private bool isWhispering = false;
    async void whisperTo(ItemClickEventArgs e) {
        replyMessage = e.Data as Messages;
        isWhispering = true;
        isReplying = false;
    }

    #endregion









    private string _hubUrl;
    private HubConnection _hubConnection;
    public async Task Chate() {
        // check username is valid


        try {

            // Create the chat client
            string baseUrl = NavigationManager.BaseUri;

            _hubUrl = baseUrl.TrimEnd('/') + ChatlingHub.HubUrl;

            _hubConnection = new HubConnectionBuilder()
                .WithUrl(_hubUrl)
                .Build();

            _hubConnection.On<Users, Messages, TypeOfMessage>("Broadcast", BroadcastMessage);

            await _hubConnection.StartAsync();

        }
        catch (Exception e) {

        }
    }

    private void BroadcastMessage(Users user, Messages message, TypeOfMessage typeOfMessage) {
        if (user.Id == UserInfoGlobalClass.user.Id) return;
        switch (typeOfMessage) { 
            case TypeOfMessage.delete:
                messages.RemoveAll(x => x.Id == message.Id);

                break;
            case TypeOfMessage.write:
                messages.Insert(0, message);

                break;
            case TypeOfMessage.edit:
                var msg = messages.Where(x => x.Id == message.Id).First();
                msg.MsgText = message.MsgText;
                msg.IsEdited = true;
                break;
        }


        
        

        // Inform blazor the UI needs updating
        StateHasChanged();
    }

    private async Task DisconnectAsync() {
            await _hubConnection.StopAsync();
            await _hubConnection.DisposeAsync();

            _hubConnection = null;
    }

    private async Task SendAsync(Messages message, TypeOfMessage typeOfMessage) {
            await _hubConnection.SendAsync("Broadcast", UserInfoGlobalClass.user, message, typeOfMessage);
        }
    }
    