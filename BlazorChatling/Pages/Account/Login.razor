@layout LoginLayout
@page "/account/login"
@using BlazorChatling.Data
@using Microsoft.AspNetCore.Mvc
@using System.ComponentModel.DataAnnotations
@using System.Security.Claims
@inject NavigationManager NavManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserValidationService UserValidationService
@inject UserInfoGlobalClass UserInfoGlobalClass

<center>
    <h1 style="color:red"> @errorMessage</h1>
    <EditForm Model="@userLocal" OnValidSubmit="@ValidateUser">
        <div>
            <br /><br /><br /><br /><br />
        </div>
        <div>
            <h3 style="font-weight:bold; color:purple">Login</h3>
        </div>
        <div>
            <br />
        </div>
        <div class="col-5 row">
            <input class="form-control col-5" @bind="userLocal.Name" placeholder="name" />
        </div>
        <br />
        <div class="col-5 row">
            <input type="password" class="form-control col-5" @bind="userLocal.Password" placeholder="password" />
        </div>
        <br />
        <div class="col-5 row">
            <span class="col-5"></span>
            <input type="submit" class="form-control col-3 btn btn-primary" value="Login" />
        </div>
        <br />
    </EditForm>
</center>

@code {
    public string errorMessage;
    private User userLocal;
    ClaimsPrincipal claimsPrincipal;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    protected async override Task OnInitializedAsync() {


        userLocal = new User();

        claimsPrincipal = (await authenticationStateTask).User;

        if (claimsPrincipal.Identity.IsAuthenticated) {
            NavManager.NavigateTo("/index");
        }
    }

    private async Task<bool> ValidateUser() {

        var user = await UserValidationService.isValid(userLocal.Name, userLocal.Password);
        UserInfoGlobalClass.user = user;
        if (user!=null) {
            string tag = user.Tag;

            ((CustomAuthenticationStateProvider)AuthenticationStateProvider).MarkUserAsAuthenticated(user.Name, user.Tag);
            NavManager.NavigateTo("/index");

            return await Task.FromResult(true);
        }


        errorMessage = "Name and/or password are incorrect!";
        return await Task.FromResult(false);

    }

}
